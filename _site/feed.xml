<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-10-03T22:26:04-07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Your Coding Buddy</title><subtitle>Learning all the gaps in your coding knowledge. You Coding Buddy  is hear to save the day!</subtitle><entry><title type="html">New Post</title><link href="http://localhost:4000/posts/2" rel="alternate" type="text/html" title="New Post" /><published>2022-10-03T00:00:00-07:00</published><updated>2022-10-03T00:00:00-07:00</updated><id>http://localhost:4000/posts/New_Post</id><content type="html" xml:base="http://localhost:4000/posts/2"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name>Deshawn Sambrano</name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry><entry><title type="html">Cli</title><link href="http://localhost:4000/2022/10/03/cli.html" rel="alternate" type="text/html" title="Cli" /><published>2022-10-03T00:00:00-07:00</published><updated>2022-10-03T00:00:00-07:00</updated><id>http://localhost:4000/2022/10/03/cli</id><content type="html" xml:base="http://localhost:4000/2022/10/03/cli.html"><![CDATA[<h2 id="takeaways">Takeaways</h2>

<p><strong>[Estimated Read Time 10 mins]</strong></p>

<p>In this blog you will learn basic bash commands. By the end of this you will know:</p>
<ul>
  <li>Basic commands to traverse your computer from the terminal</li>
  <li>The structure or commands, arguments, and options in BASH</li>
  <li>How to edit, create, move and delete files</li>
  <li>Create a script to make a folder structure for each new project you are working on.</li>
</ul>

<p>Prerequisites:</p>
<ul>
  <li>None</li>
</ul>

<h2 id="apperance-is-important">Apperance is Important</h2>

<p>Change your Default Terminal Colors <strong>NOW</strong>!</p>

<blockquote>
  <p>The happier you are when you look at your terminal the happier you will be when coding. 
More Happy means more coding. 
More Coding means more practice. 
More practice means Great Coder!</p>
</blockquote>

<p>This same principle applies for all text editors/IDEs (integrated developer environment) by the way. 
So it sounds like a joke, but seriously take some time to have a nice looking coding environment.</p>

<p>In order to change them, you should be able to create a default profile for most terminal emulators and change the color scheme, opacity, font, etc.</p>

<h2 id="know-your-os">Know your OS</h2>

<p>Knowing what OS you are on is super important as the commands change across them. 
Luckily Linux and MacOS share most of the commands because they use the same shell (you have probably heard of BASH before). 
This is especially useful to know, because all servers and super computers/computing clusters all run Linux, so having familiarity with the shell via using MacOS is very valuable. 
In contrast, Windows uses CMD or Powershell which has a differnt syntax and command list. 
Luckily for you, there is a project to give Windows BASH commands called <a href="https://gitforwindows.org/">gitbash</a>, and I highly reccomand you use that to be able to follow along. 
Most of the time if you get some CLI (command line interface) code it will assume bash so its just a good skill to have.</p>

<p>Speaking of BASH it stands for Bourne Again SHell. 
However, recently (since around 2019 or so) both MacOS and many Linux distros switched the default shell to zsh (or The Z shell). 
This is, for the most part, entirely compatible with BASH except that it adds some nice quality of life improvements that are beyond the scope of this blog, but feel free to explore on your own. 
I will say that for Mac users specifically, I would reccomend you check out <a href="https://iterm2.com/">iTerm2</a> as an alternative to the standard terminal and <a href="https://ohmyz.sh/">oh my zsh</a> to add some amazing color theming for some general improvements. 
But of course this is not necessary. <em>Mac users, I will be uploading an install script to match my own setup. And a link to it will be updated here.</em></p>

<h2 id="knowing-your-way-around-with-bash">Knowing Your Way Around with BASH</h2>

<p>First, thing open up your terminal. 
If you are using MacOS or Linux you can expect it to look something like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NEED to show example can be replaced with an image
</code></pre></div></div>
<p>Explain what each piece means</p>

<p>There are three really important commands to know to navigate around the your file system:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">pwd</code>: Print working Directory</li>
  <li><code class="language-plaintext highlighter-rouge">cd</code>: Change Directory</li>
  <li><code class="language-plaintext highlighter-rouge">ls</code>: List (Contents)</li>
</ul>

<p>One analogy for these commands is imaging you are on a random street in a US city that you don’t know. 
The <code class="language-plaintext highlighter-rouge">pwd</code> command is like looking up your current address. It will tell you were you are. 
The <code class="language-plaintext highlighter-rouge">ls</code> command would be like looking around the street (or on your map) to see what restruants are on the street. 
And <code class="language-plaintext highlighter-rouge">cd</code> would be like moving to a new location. 
In keeping the analogy, you can’t just move to an arbritrary new street because you don’t know this city. 
Instead you have to give precise directions either from were you are currently or relative to some clearly visable space (say a big colorful building you can see from anywhere in the city). 
Now let’s see these in action.</p>

<h3 id="pwd"><code class="language-plaintext highlighter-rouge">pwd</code></h3>
<p><br />
&lt;!– ```bash
~ pwd <em>instert example</em> with color if possible*
/User/Deshawn</p>
<pre><code class="language---&gt;">&lt;img src="imgs/pwd.png" alt="pwd" width="150"/&gt;
&lt;br&gt;&lt;br&gt;
The `pwd` command return where were are currently looking and is equivalent to `getwd()` in R or `os.getcwd()` in python. 
As you can see I am in my users home directory. 
This is a super common place, so it has a shortcut that can be accessed with `~` called the tilde and its above tab and to the left of the 1 on the keyboard. 
&lt;br&gt;&lt;br&gt;

&gt; **Hint**: Capitalization matters so make sure you keep that in mind. 
I personally always have my folders names lowercase to make this easier. 
Simlarly spaces require an espace `\`, so I also avoid spaces in repo names (typically using `_`'s.

### `cd`
&lt;br&gt;
&lt;img src="imgs/cd.png" alt="pwd" width="150"/&gt;
&lt;br&gt;&lt;br&gt;
The `cd` command allows you to change your current working directory similar to `os.setwd` in R and `os.chdir()` in python. 
Unlike most programming languages you are probably familiar with in BASH you don't have parentheses. 
The arguments are just placed after the command separated by a space. 
For more info about the structure of BASH scripting [see below](#the-form-of-commands)

&gt; **Hint**: Before finishing the location you want to go, you can hit tab to autocomplete the argument. 
This is invaluable and will save so much time to working memeory capcity so definitely try it out. 
Also for `zsh` users you can even type out partial directories and have your shell complete e.g., `cd De/git` will give `cd` to my `Desktop/github_repo` directory. 


### `ls`
&lt;br&gt;
&lt;img src="imgs/ls.png" alt="pwd" width="650"/&gt;
&lt;!-- ```bash
➜  good_coding_practices git:(main) ✗ ls
README.md         git.md            imgs              modeling.md       pwd.png
cli.md            good_practices.md markdown.md       productivity.md   python.md
``` --&gt;
&lt;br&gt;&lt;br&gt;

The `ls` lists all directories and files inside the specified directory (defaults to your current working directory if no directory path is specified). 
I have mine set up to give different colors to folder, which you can ignore for now. 
But separate from that I will teach you about the optional argument `-a`:
&lt;br&gt;&lt;br&gt;
&lt;img src="imgs/ls-a.png" alt="pwd" width="650"/&gt; 
&lt;br&gt;&lt;br&gt;
`ls -a` (a for all) shows all hidden files and directories in addition to the nonhidden ones. 
A hidden file is just one that starts with a `.`. 
In out case, the `.git` folder is one example. 


## The form of Commands

A command is just a mini program that executes when you call it from  a terminal. 
But in order to best understand terminal commands its useful to know how they are structured. 

Every command has 3 basic (potential) parts. 
The command itself, any options you can apply, and finally any arguments. 

As you saw above with the `cd` command, we had an argument (the new directory to change to). 
Again the argument is separated only by a space (no parenteses as you may be used to from other programming languages) and any additional arugment is also separated by a space. 
For the `ls` command we learned about the `-a` option again separated by a space. Options in bash start with a `-`. 
It is common practice for single letter options to have a single `-` and full word arguments have two `--`. 
Now that you know how commands are structure the next couple sections will list a bunch of useful basic commands before we end by showing you a way to learn the ins and outs of a command (like its options) and how to find a comand to perform a task you suspect exists. 

### Creating/Deleting/Removing New Folders and Files

For all the commands the relevant arguments will be in `[]`

- `mkdir`: Make Directory (folder) [`name_of_folder_to_make`; use the `-p` if you want to make multiple nested folders simultaneously]
- `touch`: Make an Empty File [`name_of_file_to_make`]
- `cp`: Copy [`name_of_file_to_copy`; `name_of_location_to_copy_to`]
- `mv`: Move [`name_of_file_to_move`; `name_of_location_to_move_to`; can also be used to change a files name if you move it to the same location with a new name]
- `rm`: Remove a file [`name_of_file_to_remove`]

### Viewing Contents and Editing Files

- `nano`: A simple to use text editor. You will likely hear about other editors like `vim` or `emacs`. Both are really good, but they have a really have learning curve, so I don't reccomend them when you start out. I personally use `vim` or `nano` depending on the context. [`name_of_file_to_edit`]
- `cat`: Concatenate (prints out files contents) [`name_of_file_to_print`]
- `less`: Less (is more... powerful). Useful for printing out really long docs becuse you can scroll through them [`name_of_file_to_print`]
- `more`: More (of the content on screen) Useful for printing out really long docs but not as good as `less` [`name_of_file_to_print`]

## How to Learn About New Commands

These commands are more important to remember because they let you find a command to do perform and actiona as well as learn how to use that command:

- `apropos`: à propos (meaning with regard to). This command allows you to search for all commands the perform function/have anything in their name/description about a topic. [`descriptiion_or_name` you want to search for]
  &gt;***If you only remember one command this is the one to remember***
- `man`: (Pull up the) Manual (for the respective command so you can learn all the options available) [`command` you want to know more about similar to `help()` or `??` in most languages] 

## Homework

Try to make a new folder called `git_repos` somewhere on your computer and either move or copy a file into. 
Then make `README.md` file (for advanced users try `nano` or `vim` to edit it and say something). 

Finally, make a file that can setup a folder structure for all new projects (we didnt discuss how to make workable scripts, but thats ok you can just copy and paste for now). 
Inside the newly created folder you should you should have a the following structure:

</code></pre>
<p>my_first_bash_script/
  |– analyses/
      |– plots/
  |– expriment/
      |– data/
  |– lit_review/
  |– supporting_docs/
      |– scales/
      |– irb_docs/<br />
  |– DEVELOPEMENT_DECISIONS.md
  |– README.md
```</p>

<p>Feel free to mess around with this structure a bit to suit your own needs, but having some basic structure for all projects is very important. 
I highly highly reccommend two separate <code class="language-plaintext highlighter-rouge">.md</code> files. 
The <code class="language-plaintext highlighter-rouge">README</code> is for anyone first coming to the project on how/why to run this code and what is found were (this can be updated at the very end of the project when it is read to be published). 
In contrast the <code class="language-plaintext highlighter-rouge">DEVELOPMENT</code> file is a place where you should write down every decision you made for the project.
Why did you use this library instead of that on, why did you have 60 trials instead of 90, why did you exclude a subject etc. 
I personally also leave a ton of links to stack[exchange/overflow] for how I came up with code or to justify certain things to myself. 
This file can also be private and not actually published anywhere if you prefer, but trust me, especially when writing a methods sections this is invaluable.</p>]]></content><author><name>Deshawn Sambrano</name></author><summary type="html"><![CDATA[Takeaways]]></summary></entry><entry><title type="html">Git</title><link href="http://localhost:4000/2022/10/03/git.html" rel="alternate" type="text/html" title="Git" /><published>2022-10-03T00:00:00-07:00</published><updated>2022-10-03T00:00:00-07:00</updated><id>http://localhost:4000/2022/10/03/git</id><content type="html" xml:base="http://localhost:4000/2022/10/03/git.html"><![CDATA[<h2 id="takeaways">Takeaways</h2>

<p>[Estimated Read Time 20 mins]</p>

<p>In this blog you will learn the basics of Git and GitHub/GitLab:</p>
<ul>
  <li>By the end you will know the 4 stages of the git process</li>
  <li>All the commands relevant to initalizing and working with a git project</li>
  <li>Set up your first Git repository</li>
  <li>Set up your first online repository (via either GitHub or GitLab)</li>
  <li>Be able to collaborate with any other scientist using Git</li>
</ul>

<p>Prerequisites:</p>
<ul>
  <li>None; though it may be helpful to skim through the <a href="cli.md">Command Line (Bash/zsh)</a> post first, especially if you do not know how to use the terminal or how to use a bash.</li>
</ul>

<h2 id="you-only-need-to-know-3-commands">You Only Need to Know 3 Commands</h2>
<p>Git often seems super scary, so let me just start by saying that 85% of the time you will only use the following three commands.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add .
git commit -m "Relevant Message Describing Changes"
git push
</code></pre></div></div>

<p>And if you are feeling fancy and want more coverage, adding these six commands will cover 99% of what you need in scientific settings:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git init
git clone
git status
git pull
git checkout (-b)
git branch
</code></pre></div></div>

<p>If, for whatever reason, you are still scared off, there are GUI options to take advantage of to use of git (including built into R and VS code and even Desktop app). 
I won’t cover them here; however, this blog will still be useful for you as I will cover the structure of git and help you understand what is happening at a high level.</p>

<h1 id="what-is-git">What is Git?</h1>
<p>Git is a Version Control System, thats all. Its sole purpose is to help you (pontentially from your self). 
And speaking from personal experience, getting comfortable with these commands has saved me from hours of headache.</p>

<p>Here are a few examples of things that it can save you from:</p>
<ul>
  <li>When you try to improve your codes performance, readbility, or just adding a new feature and somehow everything stops working.</li>
  <li>Save you from the hell of having multiple versions of a file, all of which are named: <img src="imgs/which_one.png" alt="Which File" /></li>
  <li>Prevent the issue of having different versions on different computers</li>
  <li>All easy collaboration on coding files allowing everyone to edit the same file and merge all the changes when it is convenient.</li>
  <li>Have a history of all the changes you have made with the ability to revert back to a point when the code was working.</li>
</ul>

<!-- ### Story Time 

One time I had a very large project (totally several thousand lines of code all together across maybe 10 or so files). 
The project was fully functional but is was not very fast (in fact it was quite slow) and it wasn't documented very well. 
As a result, I decided to fix both problems. 
I started working on improving both issues and after a couple days I noticed that the code broke. 
But I had no idea how or why it stopped working. 
Now if I wasn't using git, I would have been screwed. But luckily, all I had to do was revert back to the previously working commit and I had a fully working version.  -->

<h2 id="git-stages">Git Stages?</h2>
<p>There are 3(4?) basic stages of git. And a file can be in any of these stages. 
<img src="imgs/git_stages.png" alt="Stages of Git" /></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Untracked</code>: The first and easiest to understand is <code class="language-plaintext highlighter-rouge">Untracked</code> this is simply a file that is not even in the directory/folder git is tracking <strong><em>OR</em></strong> a file you have specifically told git to ignore/not track any changes for it.</li>
  <li><code class="language-plaintext highlighter-rouge">Unmodified</code>: These are files that you asked git to track but they have not changed since you last made a commit (i.e., made a checkpoint).</li>
  <li><code class="language-plaintext highlighter-rouge">Modified</code>: These are also files you asked git to track, but these have changed since the last commit.</li>
  <li><code class="language-plaintext highlighter-rouge">Staged</code>: Finally, you have files that you have told git to track, made changes to these files, AND you have already added them to the queue (via <code class="language-plaintext highlighter-rouge">git add FILENAME</code>) and are waiting for the commit and message (via <code class="language-plaintext highlighter-rouge">git commit -m "REALLY IMPORTANT MESSAGE"</code>). Once you have committed the changes, all staged files are now officially <code class="language-plaintext highlighter-rouge">unmodified</code>. Then the cycle continues.</li>
</ul>

<h2 id="git-example-time">Git Example Time</h2>

<h3 id="installation">Installation</h3>
<p>First double check if you have git installed already via typing <code class="language-plaintext highlighter-rouge">git -v</code> in your terminal. 
If you get a command not found error then you don’t have it install if it spits out a version then you are good to go (though you may need to update it) 
<strong>__</strong><strong>__</strong>_____</p>
<h4 id="mac-os">Mac OS</h4>

<p>Many scientific applications requires <code class="language-plaintext highlighter-rouge">xcode</code> on Mac which install <code class="language-plaintext highlighter-rouge">git</code> automatically so you might have it. 
Double check by using the method described <a href="#installation">above</a>. 
If you don’t that’s ok because you will definitely need it in the future. 
Inside your terminal type the following command:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>xcode-select --install
</code></pre></div></div>

<p>If you know what homebrew or MacPorts are you can install them via these methods as well.</p>

<p>Finally, you can use the GUI installer go the <a href="https://git-scm.com/download/mac">Binary installer section</a></p>

<blockquote>
  <p><strong>Hint</strong>: You might want to install homebrew with the following command <code class="language-plaintext highlighter-rouge">/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"</code></p>
</blockquote>

<h4 id="linux">Linux</h4>
<p>On most linux distros you can simply use the relavent package manager to install git. 
For example on debian based distros:
<code class="language-plaintext highlighter-rouge">sudo apt install git-all</code></p>

<h4 id="windows">Windows</h4>

<p>You can install git via <code class="language-plaintext highlighter-rouge">chocolately</code> or the <a href="https://git-scm.com/download/win">GUI installer</a>
<strong>__</strong><strong>__</strong>_____</p>

<h3 id="git-basics">Git Basics</h3>

<p>Now we will follow a super basic example to <code class="language-plaintext highlighter-rouge">git</code>  an understanding (pun intended). 
First let’s set up the following directory structure. 
Each of the text files should only contain 1 line of text that is just the same as the name of the file without and extension. 
So the <code class="language-plaintext highlighter-rouge">hello_world</code> file can just be have the content <code class="language-plaintext highlighter-rouge">Hello World</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>my_first_git_project/
  |-- hello_world.txt
  |-- goodbye.txt
</code></pre></div></div>

<p>Next we need to create a <code class="language-plaintext highlighter-rouge">README.md</code> file. These are super important and as the name implies you should alwasy read this before using some software/code you get online.</p>

<blockquote>
  <p><strong>Hint</strong>: This also means that you should always make a readme file anytime you make a project.</p>
</blockquote>

<p>In this file you will find basic information about how to setup/configure and run the code that you download. 
It also often describes the basic functionality of the code as this is the first thing anyone will see about the project. 
On GitHub/GitLab. 
For our purposes since this is a basic project you can just add the level 1 header and a 1 line description.</p>
<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh"># My first Git Repo</span>

Learning the basics of the a Git!
</code></pre></div></div>

<p>Next we are going to set up your username and email for all the changes that you will make. 
This isn’t required but its super simple so might as well do it.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--global</span> user.name <span class="s2">"Deshawn Sambrano"</span>
git config <span class="nt">--global</span> user.email DSambrano@g.harvard.edu
</code></pre></div></div>

<p>Now that that is all taken care of, we can initialize your repo with</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git init
</code></pre></div></div>
<blockquote>
  <p><strong>Hint</strong>: Make sure you are already <code class="language-plaintext highlighter-rouge">cd</code>‘d into the correct directory. 
It is common mistke for people initlized there home folder <code class="language-plaintext highlighter-rouge">/Users/Deshawn/</code> which will track your entire computer 😱! 
Even I did it when I frist started 😅. But don’t worry you can just remove any <code class="language-plaintext highlighter-rouge">.git</code> dir to stop tracking.</p>
</blockquote>

<p>You can confirm everything worked correctly with the <code class="language-plaintext highlighter-rouge">ls -a</code> command. 
If you see an output that shows a <code class="language-plaintext highlighter-rouge">.git</code> file then you have correctly init’d your repo 🎉.</p>

<p>You can also use <code class="language-plaintext highlighter-rouge">git status</code> to see the status of the repo. 
This is a helpful command that will tell you what branch you are on, and shows all the files in the directory and which stage they are in. 
<img src="imgs/git_status_untracked.png" alt="" />
Next we need to tell get to track all the files. We can do this individually with <code class="language-plaintext highlighter-rouge">git add hello_world.txt goodbye.txt</code> or you can use the shortcut to add all files.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add .
</code></pre></div></div>

<p>where the <code class="language-plaintext highlighter-rouge">.</code> just means add everything. Once done, the <code class="language-plaintext highlighter-rouge">git status</code> will update letting you know everything is ready to be commited.
<br /><br />
<img src="imgs/git_status_new.png" alt="pwd" width="325" /> 
<br /><br /></p>

<p>And the final step is to tell <code class="language-plaintext highlighter-rouge">git</code> to save all the changes in a checkpoint for you. 
This can be done with:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git commit -m "Relevant Message"
</code></pre></div></div>
<p>For the message since this is the first one <strong><em>Inital Commit</em></strong> works, but for all future commits, I recommend that you make something that concisely explains the changes that are being made.</p>

<p>Each time we want to save the current state of the repo we need to add all relevant files (most of the time you just add everything with <code class="language-plaintext highlighter-rouge">git add .</code>) and then commit them with a relevant message <code class="language-plaintext highlighter-rouge">git commit -m "Important message"</code></p>

<hr />
<p>need to add infor about the <code class="language-plaintext highlighter-rouge">.gitignore</code></p>

<hr />

<h3 id="git-banches-and-merging">Git Banches and Merging</h3>

<hr />
<p>Now that we have</p>

<p>edit file
add and commit it
<code class="language-plaintext highlighter-rouge">git checkout -b dev</code>
update file
<code class="language-plaintext highlighter-rouge">git checkout main</code>
update file different line and commit
<code class="language-plaintext highlighter-rouge">git merge dev</code>
no conflicts 
then repeat but the same line and resolve the conflicts</p>

<hr />

<h2 id="how-does-githubgitlab-factor-into-all-of-this">How Does GitHub/GitLab Factor Into all of This?</h2>
<p>GitHub (and GitLab an open source alternative) are primarly used (for our level of programming) as remote (i.e., cloud-based) repositories/server/storage locations. 
GitHub used to be open source but was bought out by Microsoft and no longer is (there was also a thing in which Microsoft without the knowledge of its users took thousands of repos and used them to develop and AI so if you hear arguments about it these are the two reasons why). 
Both GitHub and GitLab have several nice helpful features to make developers communicate and interact with one another more and encourage collaboration etc. 
However, as I meantioned most of the time, you will simply use them as only repos (repositories) of your own code or as a way to find other people’s code.</p>

<p>Once you have made a GitHub/GitLab account and authorized yourself on your machine, you will be able to add a remote destination (i.e., your GitHub/GitLab account page) to push (via <code class="language-plaintext highlighter-rouge">git push</code>) all the changes and commits you have made.</p>

<p>The <code class="language-plaintext highlighter-rouge">git push</code> commands simply send all the changes that you made locally on your computer to the remote server. 
No you always have a backup in case something goes wrong with your computer, WAHOO!!</p>

<p>Very commonly, you will need to download either your own code (to a new computer) or download someone else’s code. 
In order to do this you will use <code class="language-plaintext highlighter-rouge">git clone URL-TO-THE-REMOTE-REPO</code>. 
This will clone the repo to your local machine, and importantly, it will also download all the changes that were ever made, so you have a full history of the project.</p>

<h3 id="why-cant-i-just-dropbox-or-google-drive-why-do-i-need-git">Why Can’t I Just DropBox (or Google Drive)? Why do I <strong><em>Need</em></strong> Git?</h3>

<p>At this point, you might be wondering, ok, if git just adds version control abilities why can’t I just use DropBox or Google Drive. 
What does Git add that I couldn’t just get from these sources.</p>

<p>This is kinda like saying why doesn’t a surgeon use a knife instead of a scalpel.
Sure a knife can do a lot of the job, but they are designed for different things. 
DropBox/Drive are general purpose storage tools (like a knife) while git is specifically designed for writing code. 
That being said, let’s highlight specific examples:</p>
<ol>
  <li>While you do get some history of a file on both platforms, neither provides any information about what is different between the different versions. So you would need to remember what changes you personally made on April 23, 2022 at 4:00 pm compared the April 23, 2022 at 4:15 pm. First of all there is no chance that you remember what was different. In contrast, with git you have all the information stored with a message for every commit made.</li>
  <li>But let’s pretend you have an insane memory and actually do remeber a general gist of what was differnt. You still won’t find the specific differences without opening both files and comparing them. Again, with git, you have a single command to see all the changes made to that file. They can also be easier viewed view GitHub/GitLab.</li>
  <li>Git does Delta changes meaning that it uses a lot less resources in terms of network bandwidth, storage, and general computing resources.</li>
  <li>Similar to the previous example, This requires you to store all of the data. What if you computer doesnt have enough storage. Instead using Git and GitHub, you will only need to download and store the relevant components and you can delete them at any time to reclaim your storage.</li>
  <li>And perhaps the most relatable example is, when you want to change code (and you are using DropBox/Google Drive) what do you do. My bet, is that you comment out the old code and create the new code (that way if something breaks you can always go back). But what if somehting doesn’t break right away. What if it takes a while to realize that this caused a problem. Are you just going to leave the old commented version in there for ever? If you do then you won’t have very maintainable code, because the amount of comments are quickly going to explode. In constrast, with git, you just save the version as a commit make the changes, and if <em>anything</em> goes wrong, just rewind back to the latest commit.</li>
</ol>

<h3 id="github-example">GitHub Example</h3>
<p>If you did not install brew before it would be a good idea to do so now:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Installs homebrew</span>
/bin/bash <span class="nt">-c</span> <span class="s2">"</span><span class="si">$(</span>curl <span class="nt">-fsSL</span> https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span class="si">)</span><span class="s2">"</span>

<span class="c"># Installs git and github command line tools</span>
brew <span class="nb">install </span>git gh
</code></pre></div></div>

<p>but again, if you don’t want to you can just install the github command line tools from there <a href="https://cli.github.com">website</a>. 
Once done you will need to set everything up with <code class="language-plaintext highlighter-rouge">gh auth login</code> and follow the on screen prompt</p>

<!-- ```
gh auth login 
``` -->

<p><img src="imgs/gh_auth.png" alt="" /></p>

<h4 id="github-cli-setup">GitHub CLI Setup</h4>
<p>There are two methods to give yourself GitHub access via git. The first is <code class="language-plaintext highlighter-rouge">HTTPS</code> and the second is <code class="language-plaintext highlighter-rouge">SSH</code>. 
These are two security protocols (details on <code class="language-plaintext highlighter-rouge">SSH</code> in a future post), but it doesnt really matter which one you pick, but you have to know which one you are using because there are some slight changes depending on which on you choose. 
I personally use <code class="language-plaintext highlighter-rouge">SSH</code>, but again it doesnt matter.</p>

<h4 id="github-repo-setup">GitHub Repo Setup</h4>

<p>When you create a new repo on Github you will be prompted with the following options. Fill them as needed until you get the next section. 
<img src="imgs/gh_p1.png" alt="" /></p>

<p>Assuming you did not add a <code class="language-plaintext highlighter-rouge">README.md</code>, <code class="language-plaintext highlighter-rouge">.gitignore</code> or <code class="language-plaintext highlighter-rouge">license</code> then you will see the follow screen. 
<img src="imgs/gh_p2.png" alt="" /></p>

<p>Following these prompts will get you set up, but I do want to highlight what each are doing so you don’t need to follow them ever time. 
The <code class="language-plaintext highlighter-rouge">echo</code> line creates a <code class="language-plaintext highlighter-rouge">README</code> file with a title header.
Next we had the <code class="language-plaintext highlighter-rouge">git init</code> which initializes a repo, as we showed above. 
Next we are asked to add the <code class="language-plaintext highlighter-rouge">README</code> file and <code class="language-plaintext highlighter-rouge">git commit</code> it.
Afterwards it uses the <code class="language-plaintext highlighter-rouge">git branch -M main</code> to rename to current branch to <code class="language-plaintext highlighter-rouge">main</code> which is the default branch naming scheme for GitHub. 
Then, we use <code class="language-plaintext highlighter-rouge">git remote add</code> to add the newly created GitHub repo as the remote repo for this project, and we give it a nickname called <code class="language-plaintext highlighter-rouge">origin</code>. 
Finally, we push the all local commits with <code class="language-plaintext highlighter-rouge">git push</code> and the <code class="language-plaintext highlighter-rouge">-u orign main</code> option/arguments tell git to always use this particular GitHub repo for this branch.</p>

<blockquote>
  <p><strong>Hint</strong>: You can actually store different branches on different repos (or the same repo, which is the most common).</p>
</blockquote>

<h2 id="common-errors-and-hiccups">Common Errors and Hiccups</h2>
<ul>
  <li>Initalizing a git repo on your whole Computer (or your home directory <code class="language-plaintext highlighter-rouge">~</code>)</li>
  <li>Trying to download a HTML file from GitHub</li>
</ul>

<h2 id="advanced-topics-in-git">Advanced Topics in Git</h2>
<p>We covered a lot today, thankfully, that is most of the important things you need. 
However, there are a few advanced topics that I do think are useful to know, even though you might not use them a bunch:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">.gitignore</code>: I use this the most on the list. This allows you to tell git to ignore specific files. This is super useful if you have a file that contains any sensative information (e.g., SECRETE_KEYS, Identifiable Subject data, etc.).</li>
  <li><code class="language-plaintext highlighter-rouge">git diff </code>: a function to specifically see what has changed line by line since the last commit
<!-- - Branches: These are when you take your existing project and have a seperate timeline for it. This is super useful to make a branch if you are going to make a major change to it that might break things. Need example --></li>
  <li>Fork: A fork is when another person takes your existing projects and adds their own spin or flavor on top and then stores it on their own repo.</li>
  <li>Pull Request: This is a mechanism to allow either other team memebers or other developers to update your code and merge it with the main branch.</li>
</ul>

<h2 id="homework">Homework</h2>
<p>I want you to take one of your projects and initialize it as a git project and store it remotely. 
This can be as a private repo if need be</p>

<h2 id="additional-resources">Additional Resources:</h2>

<p><a href="https://youtu.be/HkdAHXoRtos" title="Fireshipio: Git and Github">fireshipio</a></p>]]></content><author><name>Deshawn Sambrano</name></author><summary type="html"><![CDATA[Takeaways]]></summary></entry><entry><title type="html">Good Practices</title><link href="http://localhost:4000/2022/10/03/good-practices.html" rel="alternate" type="text/html" title="Good Practices" /><published>2022-10-03T00:00:00-07:00</published><updated>2022-10-03T00:00:00-07:00</updated><id>http://localhost:4000/2022/10/03/good-practices</id><content type="html" xml:base="http://localhost:4000/2022/10/03/good-practices.html"><![CDATA[<h2 id="takeaways">Takeaways</h2>

<p>[Estimated Read Time XX mins]</p>

<p>In this blog you will learn a variety of helpful Coding Practices to improve the readability efficacy of your code. These are in no particular order and some may some obvious, while others less so. If you already know why its useful/already implement it, feel free to jump around</p>

<p>Prerequisites:</p>
<ul>
  <li>None</li>
</ul>

<h2 id="imports-first">Imports First</h2>

<h2 id="no-hard-coding-ever">No Hard Coding, Ever!</h2>

<h2 id="modular-functions">Modular Functions</h2>

<h2 id="modular-code">Modular Code</h2>

<h2 id="write-code-for-humans-not-machines">Write Code for Humans not Machines</h2>

<h2 id="will-you-remember-this-in-xx-months">Will you Remember this in XX Months?</h2>]]></content><author><name>Deshawn Sambrano</name></author><summary type="html"><![CDATA[Takeaways]]></summary></entry><entry><title type="html">Markdown</title><link href="http://localhost:4000/2022/10/03/markdown.html" rel="alternate" type="text/html" title="Markdown" /><published>2022-10-03T00:00:00-07:00</published><updated>2022-10-03T00:00:00-07:00</updated><id>http://localhost:4000/2022/10/03/markdown</id><content type="html" xml:base="http://localhost:4000/2022/10/03/markdown.html"><![CDATA[<h2 id="takeaways">Takeaways</h2>

<p>[Estimated Read Time 5 mins]</p>

<p>In this blog you will learn the basics of Markdown and Markdown Files. 
These are in no particular order and some may some obvious, while others less so. 
If you already know why its useful/already implement it, feel free to jump around</p>

<p>Prerequisites:</p>
<ul>
  <li>None</li>
</ul>

<h2 id="what-is-markdown">What is Markdown</h2>

<p>Markdown is a markup language. 
It is a super easy way to have embedded structure when taking notes or documenting things. 
This is because it has super simple syntax.</p>

<p>For example all these blogs were created with Markdown. 
To get started make a make a file name ending in the <code class="language-plaintext highlighter-rouge">.md</code> extension. 
Now any text you type will have a highlevel markup. 
So if you want to make headers like we have here just put <code class="language-plaintext highlighter-rouge"># Title</code> then have a line break and all  the text underneath will be in that sub header. 
Similarly you have do other headers with the following syntax:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Heading level 1
## Heading level 2
### Heading level 3
#### Heading level 4
##### Heading level 5
###### Heading level 6
</code></pre></div></div>

<h1 id="heading-level-1">Heading level 1</h1>
<h2 id="heading-level-2">Heading level 2</h2>
<h3 id="heading-level-3">Heading level 3</h3>
<h4 id="heading-level-4">Heading level 4</h4>
<h5 id="heading-level-5">Heading level 5</h5>
<h6 id="heading-level-6">Heading level 6</h6>

<p>Basically, Markdown is a way to allow you to focus on the notes or writing process without having to add in all the high level things to add a nice sold structure without having to deal with the extra headache. 
Below are several simple/common things you will want to do in Markdown. 
But for more info visit the <a href="https://www.markdownguide.org/basic-syntax">Markdown cheatsheet</a>. 
Otherwise enjoy your new toy! Don’t forget the <a href="markdown.md#homework">Homework</a></p>

<p>One final piece of advice, while viewing the <code class="language-plaintext highlighter-rouge">.md</code> file you won’t see all the fancy formatting; however, most modern IDE (e.g., sublime, VScode, etc.) have either native or plugin support to allow you to view the full fancy version while typing.</p>

<hr />
<h3 id="bold-and-emphasis">Bold and Emphasis</h3>
<p>Bold and italics are easy to <strong>bold</strong> (<code class="language-plaintext highlighter-rouge">**bold**</code>), <em>italics</em> (<code class="language-plaintext highlighter-rouge">*italics*</code>), <strong><em>bold and italics</em></strong> (<code class="language-plaintext highlighter-rouge">***bold and italics***</code>).</p>

<h3 id="links-most-useful">Links (Most Useful?)</h3>
<p>This is the feature I use the most. 
Here we can use the following structure for links:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[description](link)
</code></pre></div></div>

<p>But when I mean link, I don’t just mean a website… no, no, no. 
They can link to any file on your computer as well using its relative path. 
So say we had a Markdown file containing notes. 
I can link to that file from here with the following syntax:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>I can link to that file from here with the following [syntax](notes.md)
</code></pre></div></div>

<p>But it gets even better, since that is a markdown file I can even link to a specific subsection. 
For example, say their was a subsubsection (level 3 header) titled lottery. 
Then I can specifically link to that with this syntax:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Linking to the [lottery section](notes.md#lottery)
</code></pre></div></div>

<p>Of course, since you can link to a file, you can also embed pictures and links.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[My personal website](https://dsambrano.com/)
</code></pre></div></div>
<p><a href="https://dsambrano.com/">My personal website</a></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>![Image Description](imgs/git_stages.png)
</code></pre></div></div>
<p><img src="imgs/git_stages.png" alt="Image Description" /></p>
<blockquote>
  <p>Note the <code class="language-plaintext highlighter-rouge">!</code>. Also, you need to have the image in that folder with that name for it to show up.</p>
</blockquote>

<h2 id="lists">Lists</h2>
<p>list are as easy as a dash:</p>
<ul>
  <li>first</li>
  <li>second
    <ul>
      <li>second a</li>
      <li>second b</li>
    </ul>
  </li>
  <li>third</li>
  <li>etc…</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- first 
- second
  - second a
  - second b
- third 
- etc...
</code></pre></div></div>

<p>Numbered list work as well (notice you dont even need to number them correctly):</p>
<ol>
  <li>first</li>
  <li>second</li>
  <li>third</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. first
1. second
3. third
</code></pre></div></div>

<h2 id="homework">Homework</h2>

<p>Create a Markdown file describing all the main scientific decisions you made on your most recent project. 
For example, why did you select that specific stimulus vs another. Why that method?</p>
<blockquote>
  <p><strong>Hint</strong>: Link to relevant artcles or to other markdown files containing notes you made.</p>
</blockquote>]]></content><author><name>Deshawn Sambrano</name></author><summary type="html"><![CDATA[Takeaways]]></summary></entry><entry><title type="html">Computation Modeling</title><link href="http://localhost:4000/computation-modeling" rel="alternate" type="text/html" title="Computation Modeling" /><published>2022-10-03T00:00:00-07:00</published><updated>2022-10-03T00:00:00-07:00</updated><id>http://localhost:4000/modeling</id><content type="html" xml:base="http://localhost:4000/computation-modeling"><![CDATA[<style>
    table {
        width: 100%;
    }
</style>

<h2 id="takeaways">Takeaways</h2>

<p><strong>[Estimated Read Time 20 mins]</strong></p>

<p>In this blog you will learn the basics of computational modeling. Specifically you will learn:</p>
<ul>
  <li>What is a computational model?</li>
  <li>Why you should use computational models?</li>
  <li>How to implement a computational model with an example.
    <ul>
      <li>Model Selection</li>
      <li>Ammedding a Model to suit your needs</li>
      <li>Decision Rules</li>
    </ul>
  </li>
</ul>

<p>Difficulty: <span style="color:yellow">Intermediate</span></p>

<p>Prerequisites:</p>
<ul>
  <li>Read through this <a href="papers/Holt2002_RiskAversionIncentives_enhanced_opt.pdf" title="Holt &amp; Laury 2002">paper</a> or have some basic background in behavioral economics / learning literature (e.g., reinforcement learning)</li>
</ul>

<h2 id="what-even-is-a-computational-model">What Even is a Computational Model</h2>

<p>A Computational Model is just a mathematical equation, serving as a hypothesis, for some psychological phenomenon.
We use models all the time.
Most commonly with the linear model in regression.
A computational model just adds flexibility in that it is not predefined so you can adjust it to your specific situation.
So you can allow it have some non linearity or have only partial linearity.</p>
<blockquote>
  <p><strong>Note</strong>: When you use linear (or logistic) regression to prediction choices, you are using a model for how people are making those choices. Whatever you include in this model is all that it knows; and importantly, these models assume a particular structure for how choices are made. Is it the right structure for your data, maybe, maybe not? That is when computational models come in. You get to specific the structure.</p>
</blockquote>

<h2 id="why-should-you-use-a-computational-model">Why Should You Use A Computational Model</h2>
<p>Pull from Prospectus (Utlity and generalization)</p>

<p>Implementing computational models require a lot more work than a standardized, so if you are going to use it over standard stats model you should have a good reason. 
While there are several reasons one might elect to use a computational model, here I will provide two: Utility and Generalization. 
Of course if you already are familar with their utility, feel free to skip to the next <a href="#my-first-model">section</a>.</p>

<p>Computational models are particularly useful when they replace older schematic based models like the one below. 
Schematic models are a hypothesis or rather series of hypotheses about a particular phenomena. 
These models represent different variables of interest as boxes and relationships between them with arrows.
Schematic models are really useful when you are first exploring a feild and you can begin to map out all of factors that are relavent to what you are studying. 
However, these types of modesl have some significant drawbacks.</p>
<blockquote>
  <p><strong>Note</strong>: I will be specifically, critquing the EIC model, but this was incredibly important at the time. I am specifically using it as an example, but all schematic based model have these pitfalls.</p>
</blockquote>

<p><img src="imgs/image.png" alt="THIS IS SUPPOSED TO BE AN IMAGE OF A SCHEMATIC BASED MODEL" />
<img src="imgs/cd.png" alt="test" /></p>

<p>First, schematic based models do not provide specific hypotheses, making them difficult (if not impossible) to falsify.
For example, each box on the schematic often represents a plethora of variables.
In the EIC model, there is box representing the characteristics of the decision maker (e.g., preferences and personality), which influences both one’s current emotions as well as the utility calculation of the options.
Undoubtedly, the authors do not imply every characteristic impacts one’s affective state and utility calculations, but which ones are important, and which can be ignored, are not specified.
Perhaps more importantly, because the particular variables of interest are not specified, one would need to test all possible characteristics to falsify the model’s hypothesis.</p>

<p>The second shortcoming of schematic based models is, by design, they do not make specific hypotheses about the magnitude of effects between related components.
For example, in the EIC model one’s current emotion influences the evaluations they make, which in turn affects their choices.
But how much does one’s affect impact their evaluations and what is the nature of that relationship?
Is it linear, the more intense the emotion the larger the effect, or is it based on a threshold, where any emotion intensity after the threshold will have a similar effect and any emotion below the threshold will not impact the evaluation at all?
Schematic based models do not provide this information.
Importantly, the EIC model, was hypothesized as general purpose model and never intended to address these concerns.
Particularly because the field was still at a state where we needed to identify the affective factors involved in the decision making process (the time when schematic based models are most effective).
However, the next major leap to improve our understanding of the relationship between affect and decision making requires us to address these shortcomings of schematic based models.
One solution to this problem is to use a computational model for how people make decisions.</p>

<p>In addition to several practical benefits (e.g., ensuring your trial space is sufficiently wide and simulations), computational models address the limitations of schematic based models.
Since a computational model specifies all the variables that are hypothesized to impact one’s choice, anyone who has the model can make predictions outside the context for which the original model was developed.
For example, if an experiment includes lotteries with win rate of 25%, 50%, and 75%, one could use the model to hypothesize how a person would choose if the win rate was 10%.
They need only supply the arguments for a specific lottery as well as person’s parameter estimates.
Crucially, if new experimental data stands in conflict with the <strong>a priori</strong> predictions of the model, then the model is inaccurate (or at the very least incomplete).
There is a clear falsifiable hypothesis even outside the context of the original experiment.
Additionally, since a computational model is essentially a mathematical formula, the parameters provide clear, mathematically defined impacts on the outcome, and the impact can be interpreted before any experiment or parameter estimation.
By design, the model’s formula describes the magnitude for the effects, whether they be linear, exponential, etc.
Together, these features help improved the scientific discourse.</p>

<h3 id="my-first-model">My First Model</h3>
<p>Link to paper I send to RAs</p>

<p>In order to give yourself a basic working example, I highly reccomend you read through this <a href="papers/Holt2002_RiskAversionIncentives_enhanced_opt.pdf" title="Holt &amp; Laury 2002">paper</a>.
This is a pretty foundational paper for creating models of decision making and gives a pretty good walkthrough on the process. 
For example, it describe how/why you typically want to add a noise term when modeling human decisions.
Its also quite short, only about 13 pages.</p>

<p>… Don’t worry I ‘ll wait. 😂</p>

<p>Now that you have finished reading through that, we can go through <!--2--> an example<!--s--> for implementing a computational model on simulated data.
The data will be generated from an experiment were the participant need to decide between two lotteries.
The lotteries are shown below in the table. 
I want you to look at each lottery and without looking at the column on the right, decided which lottery you would choose: Option A or Option B.
Do this for all 10 lotteries.</p>

<center>

| Option A                       | Option B                    | EV difference|
|--------------------------------|:---------------------------:|-------------:|
|1/10 of $2.00, 9/10 of $1.60  | 1/10 of $3.85, 9/10 of $0.10  |  $1.17 |
|2/10 of $2.00, 8/10 of $1.60  | 2/10 of $3.85, 8/10 of $0.10  |  $0.83 |
|3/10 of $2.00, 7/10 of $1.60  | 3/10 of $3.85, 7/10 of $0.10  |  $0.50 |
|4/10 of $2.00, 6/10 of $1.60  | 4/10 of $3.85, 6/10 of $0.10  |  $0.16 |
|5/10 of $2.00, 5/10 of $1.60  | 5/10 of $3.85, 5/10 of $0.10  | -$0.18 |
|6/10 of $2.00, 4/10 of $1.60  | 6/10 of $3.85, 4/10 of $0.10  | -$0.51 |
|7/10 of $2.00, 3/10 of $1.60  | 7/10 of $3.85, 3/10 of $0.10  | -$0.85 |
|8/10 of $2.00, 2/10 of $1.60  | 8/10 of $3.85, 2/10 of $0.10  | -$1.18 |
|9/10 of $2.00, 1/10 of $1.60  | 9/10 of $3.85, 1/10 of $0.10  | -$1.52 |
|10/10 of $2.00, 0/10 of $1.60 | 10/10 of $3.85, 0/10 of $0.10 | -$1.85 |

</center>

<h3 id="selecting-a-model">Selecting a Model</h3>

<p>The first and most important part for computational modeling is the model that you select. 
You should definitely take some time when selecting a model because this <strong>IS YOUR PREDICTION</strong> for how participants will make decisions in experiment. 
Often times you will use a model that has already been used in other experiments, but occasionally, you will need to make your own (or much much more likely, you will have to adjust an existing one).
With that in mind, I will go through a really basic example for adjusting models to improve them.
This should give you a sense of how this process works, such that you can do it on your own when the time requires it.</p>

<p>Our example data is going to come from people making choices between different lotteries involving money.
As such, expected value (EV) is quite literally an optimal starting point.
For the uninitiated, EV is a mathematical formula for determining the value of a risking lottery. 
So if you are acting perfectly rationally, you should choose the lottery with the highest EV. 
The formula for EV is:</p>

\[EV = \sum_{i=1}^{k} p_i \times v_i\]

<p>where $p$ is the probablity of winning the lottery and $v$ is the value that you get if you win that lottery. $k$ represents the total number of options for the lottery. So if you have a lottery that was 50:50 and if you win you get $10 and if you lose you get $0 then you could solve with:</p>

<p>\(EV = .5 * 10 + .5 * 0\)
\(EV = 5 + 0\)
\(EV = 5\)</p>

<p>which is to simply say that, if you played this lottery an infinite number of times, we would expect you to, on average, earn $5.
This should make intuitive sense giving the options of the lottery.
This formula is useful because it works no matter what the probabilities or winning amount are, and it doesnt matter how many of them their are.</p>

<p>We can apply that same formula to all the lottery options shown in the table above. 
And then we will take the difference in EV between the two options (see right most column).
Finally, we can implement a decision rule, that is a rule to decide which option to pick. 
For EV, you should pick the option that has a higher expected value. 
In the figure below, we plotted the probability of choosing the first option (Option A) against the different options.</p>

<p><img src="code/plots/ev_plot.png" alt="EV Model Predictions" /></p>

<p>Notice that this model predicts that people would select option A for the first 4, and then select B for the remaining ones. 
As described above, this is mathematically optimal.
But the question is, how would you expect people to decide to their lotteries?
Which did you choose when you picked between them?</p>

<p>Here is some simulated data to use as a comparison:
<img src="code/plots/part_data_plot.png" alt="EV Model Predictions with Simulated Data" /></p>

<p>Again the dotted line indicates that EV models predictions, and the new solid line with dots indicates the average response for 50 simulated people. 
What are your thoughts? 
Is this model any good?
You might think, no, its pretty bad, which it is, but there is something important that it gets right.
Notice that the simulated data has a similar structure as the prediction.
That is to say pretty much everyone chooses Option A for the first 4 and everyone selects Option B for the final 3.
So in reality, it only gets the middle ones wrong. 
So maybe we can adjust this model to account for that as opposed to come up with a entirely new model.</p>

<h3 id="a-story-of-individual-differences-adding-parameters">A Story of Individual Differences: Adding Parameters</h3>

<p>One thing you might have noticed, is that the EV model expects everyone to make the same choices. 
The hypothesis is so absurd that is can be rejected outright.
Instead, it is pretty obvious that people make different choices; for example, some people really don’t like it if the odds of winning are not in their favor.
In Psychology/Econoimics, we call this behavior risk aversion.
And we can add this to the model as well. 
Continuing with our example, this can be done by adding a exponent to the $v$ term in EV. 
For example:</p>

\[SV(p, v) = \sum_{i=1}^{k} p_i \times v_i^{\alpha}\]

<p>There are a few things I want to point out.
First I changed the function from $EV$ to $SV$.
This is to signify, that this is no longer an equation for expected value, but rather, for <strong>subjective value</strong>, or the value a individual places on that lottery. 
The second is that I have made it more clear that $p$ and $v$ are inputs to the model by including them in the parentheses on the left side. Finally, you can see the new term $\alpha$ which is unique to each individual.
This allows us to be able to predict that people will make choices different from one another; however, importantly, we expect everyone to make choices with this specific structure in mind.</p>
<blockquote>
  <p><strong>Note</strong>: Traditionally, individual specific parameters typically use greek letters. This can help you identify what parts of the model is an input versus participant specific.</p>
</blockquote>

<p>Now we can use this model to predict the participants decisions.
But which $\alpha$ should we use?
Well since we are just exploring, let’s pick a few to see which ones look more accurate.</p>

<p><img src="code/plots/sv_plot.png" alt="SV Model Predictions" /></p>

<p>Now we added the colored lines.
What you should notice is that it seems like that blue (.7) and green (.5) lines seem to improve on the EV model in that it gets the threshold a littel bit more accurate. 
This is a good sign, it lets us know we are on the right track.</p>
<blockquote>
  <p><strong>Note</strong>: These are similated data and not necessarily representive of real data. Some values have been intensionally exaggerated for pedogological reasons.</p>
</blockquote>

<p>But there is something still bothering me, and hopefully you as well. 
The thresholds are really sharp; the data has a gradual decline as a opposed to be completely instantaneous. 
Let’s fix that by adjusted the decision rule.</p>

<h3 id="decision-rules">Decision Rules</h3>

<p>We are going to add another equation to serve as a rule for making the choice.
So instead of simply choosing the option with the higher EV or SV we will have a more graded response. 
As with most things, there are a few different equations you could use. 
For this tutorial, we will use an inverse logit function:</p>

\[p(Option A, SV_a, SV_b) = \frac{1}{1 + e^{\gamma(SV_b - SV_a)}}\]

<p>Again we have an issue, what is the correct $\gamma$?
Of course, without looking at the data you would be hard pressed to give a sensible answer.
So we will use a similar stragey, use a couple and plot them.</p>

<p><img src="code/plots/sv_prob_plot.png" alt="SV Model Predictions" /></p>

<p>This looks incredible!!
We are having very close predictions to the real data!
Specifically, when $\gamma=8$ it seems to match the data really well.</p>

<p>Now that you got the hang of what a computational model is and have they work, you are ready for the next section.
Before heading to the next section, see the <a href="#homework">practice</a> shown below to give you some more experience with how these work.
In the next tutorial you will dive deeper into computational models. 
Specifically, you will learn how to estimate the parameters of your model instead of guessing and checking. Additionally, you will learn how to evaluate whether its a good model or not.</p>

<h2 id="advanced-topics">Advanced Topics:</h2>

<ul>
  <li>Param Estimation: Use the Data: Estimating Parameters</li>
  <li>Simulation</li>
  <li>degrees of freedom</li>
  <li>Model Comparison</li>
</ul>

<h2 id="homework">Homework</h2>

<h2 id="references">References</h2>]]></content><author><name>Deshawn Sambrano</name></author><category term="Math" /><category term="Computational-Modeling" /><category term="R" /><category term="Python" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Productivity</title><link href="http://localhost:4000/2022/10/03/productivity.html" rel="alternate" type="text/html" title="Productivity" /><published>2022-10-03T00:00:00-07:00</published><updated>2022-10-03T00:00:00-07:00</updated><id>http://localhost:4000/2022/10/03/productivity</id><content type="html" xml:base="http://localhost:4000/2022/10/03/productivity.html"><![CDATA[<h2 id="takeaways">Takeaways</h2>

<p>[Estimated Read Time 5 mins]</p>

<p>In this blog I will give a hogpodge of miscellanous tips to improve your general productivity. 
Each are super simple and don’t really fit within any of the other posts. So this is the place for them.</p>

<p>Prerequisites:</p>
<ul>
  <li>None</li>
</ul>

<h2 id="never-do-anything-twice">Never Do Anything Twice</h2>
<p>This is probably the most valuable tip here. 
Honestly, never do things more than once. 
If you have to do somehting more than once, you should write code to save you the hassle. 
Let me preface this by saying, that there will be times, especially as you are improving as a programmer, that it will end up taking more time by you coding it out. 
However, that is time that you learned a new skill and it will make future projects much quicker to implement either because now you have more knowledge or because you have a better understanding of how to make a clean code, or better yet, becuse you will reuse part of that code later on. 
Your time is very valuable, don’t waste it on repeating things. 
If you are going to spend time doing something more than once, it should at least come with the benefit of additional knowledge.</p>

<h2 id="use-a-tiling-window-manager">Use a Tiling Window Manager</h2>

<p>I used to waste way way to much time either switching back and forth between apps or adjusting them so that I can see both at once. 
That is… I had that problem until I came across a tiling window managers. 
So default Mac OS and Windows use a Floating (or a stacking) window manager, where as you open additional apps they keep stacking on top of one another (or floating over one another). 
This style is comfortable because we are used to it, but it waste a lot of time because we have to flip through to find the apps (even with Keyboard Shortcuts its still super slow) or to move/resize them to see all the content on the screen at once. 
Tiling window managers on the other hand, automatically adjust where new windows show up. 
As the name implies they are adjusted in a grid that makes all the windows look like different times. Its truely amazing. 
It increase my productivity even more than when I got a second monitor (which if you have never had one, they are super helpful).</p>

<p>Most tiling window managers are designed so you never have to touch that mouse, so you have a ton of keyboard shortcuts, to flip/rearrange/adjust the windows. 
This will take a couple of days to get used to but it is definitely worth it. 
Also you can change what those keybinds are so they suit something that either is more intuitive or something you are just used to. 
You can just search them up, but here is my favorite for Mac OS and Linux below:</p>

<ul>
  <li>Mac OS: <a href="https://github.com/ianyh/Amethyst">Amethyst</a></li>
  <li>Linux: <a href="https://github.com/awesomeWM/awesome">Awesomewm</a></li>
</ul>

<h2 id="customize-your-software">Customize Your Software</h2>

<p>This Sounds silly, but if you find what you are looking at aethethically pleasing, then you are more likely to use it. 
Therefore, you will get more and more practice with that thing. 
I highly reccomend that you customize the look and feel of all text editors/IDEs as well as things like your terminal. 
Make sure it shows you the information that is more important to you.</p>

<p>One clear example is the default terminal on Mac. 
I used to think this was fine as is (that is once I change the them to black background and white text), but this all changed when I used Linux for the first time. 
Why? Because on Linux, be default your terminal color coordinates files. 
So if you use the <code class="language-plaintext highlighter-rouge">ls</code> command then all the files will be one color, folders another, and linked files another. 
This was amazing, it made it so much easier to navigate and see what I needed. 
Since then, I switched to the <a href="https://iterm2.com/">iTerm2</a> terminal and added the <a href="https://ohmyz.sh/">oh my zsh</a> color theming. 
The default color themes are good enough for most and one each how it is help is that it adds additional info to the command prompt to let you know if you are currently inside a git repo or not!</p>

<h2 id="develop-a-meta-coder-mindset">Develop a Meta Coder Mindset</h2>

<p>When I first started to code, I just wanted to work. 
But as I improved, I didnt just want my code to work, I wanted it to be elegant, readable, and at least somewhat optimized. 
Try to have this mindset as your are writing code and it will improve your code in the future. 
But more importantly, developing this mindset will force you to realize when certain solutions you are using in a software application is inelegant, and therefore you should find an alternative. 
I know a lot of people who learned some extremely complicated (and error prone) method to accomplish something in say excel, but they never tried to find another solution. 
Ask yourself is this the best way to accomplish the task at hand? Many times, you might think, surely someone else has come up with a simplier/cleaner solution than this.</p>]]></content><author><name>Deshawn Sambrano</name></author><summary type="html"><![CDATA[Takeaways]]></summary></entry><entry><title type="html">Python</title><link href="http://localhost:4000/2022/10/03/python.html" rel="alternate" type="text/html" title="Python" /><published>2022-10-03T00:00:00-07:00</published><updated>2022-10-03T00:00:00-07:00</updated><id>http://localhost:4000/2022/10/03/python</id><content type="html" xml:base="http://localhost:4000/2022/10/03/python.html"><![CDATA[<h2 id="takeaways">Takeaways</h2>

<p>[Estimated Read Time 20 mins]</p>

<p>In this blog you will learn the basics of Git and GitHub/GitLab:</p>
<ul>
  <li>By the end you will know the 4 stages of the git process</li>
  <li>All the commands relevant to initalizing and working with a git project</li>
  <li>Set up your first Git repository</li>
  <li>Set up your first online repository (via either GitHub or GitLab)</li>
  <li>Be able to collaborate with any other scientist using Git</li>
</ul>

<p>Prerequisites:</p>
<ul>
  <li>None; though it may be helpful to skim through the <a href="cli.md">Command Line (Bash/zsh)</a> post first.</li>
</ul>

<h2 id="reproducible-code">Reproducible Code</h2>

<h3 id="freeze-a-packages">Freeze a Packages!</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip freeze &gt; requirements.txt
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install -r /path/to/requirements.txt
</code></pre></div></div>

<h3 id="virtual-environments">Virtual Environments</h3>

<p>Virtual Environments are a mechanism used to prevent dependency issues across your python project. 
There are several mechanisms for implementing virtual environments:</p>
<ul>
  <li><a href="https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html" title="Conda environments">Anaconda environments</a> with <code class="language-plaintext highlighter-rouge">conda create</code></li>
  <li><a href="https://pypi.org/project/virtualenv/" title="Virtual Env">virtualenv</a> with <a href="https://virtualenvwrapper.readthedocs.io/en/latest/" title="Virtual Wrapper">vewrapper</a></li>
  <li><a href="https://github.com/pypa/pipenv" title="Pipenv Python Dev for Humans">pipenv</a></li>
  <li><a href="https://github.com/pyenv/pyenv" title="Pyenv for simple VE in python">pyenv</a>
For beginners, I would say <a href="https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html" title="Conda environments">anaconda environments</a> are the easiest to use. 
So I would recommend using those, and switching to one of the others if the project needs it because (conda environments can take a lot of space and are quite heavy).</li>
</ul>

<p>After installing (you can use homebrew <code class="language-plaintext highlighter-rouge">brew install --cask anaconda</code> or download from the <a href="https://www.anaconda.com/products/distribution" title="Anaconda">website</a>), you can create a <a href="https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html" title="Conda environments"><code class="language-plaintext highlighter-rouge">conda env</code></a> with the following command:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda create <span class="nt">-n</span> NAME_OF_ENVIRONMENT <span class="nv">python</span><span class="o">=</span>VERSION_NUMBER
</code></pre></div></div>

<p>then you just activate the environment with:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda activate NAME_OF_ENVIRONMENT
</code></pre></div></div>
<p>now everything that you install will be completely isolated from the rest of your python environments so you don’t need to worry about dependency incompatabilities.
To leave the environment just use:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda deactivate
</code></pre></div></div>

<p>Using the builtin virutalenv you can use:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 <span class="nt">-m</span> venv name_of_virtual_env <span class="c"># Creation</span>
<span class="nb">.</span> name_of_virtual_env/bin/activate <span class="c"># Activation</span>
</code></pre></div></div>

<h2 id="f-strings">f strings</h2>

<p>When first learning how to handle strings in pythong you will likely learn the <code class="language-plaintext highlighter-rouge">%</code> sign strategy. This is woefully outdated so as you progress you will soon learn the <code class="language-plaintext highlighter-rouge">.format</code> method, which was introduced in python <code class="language-plaintext highlighter-rouge">3.0</code>. However this is also no longer the best way to deal with strings. 
The modern way to deal with strings in python are with <a href="https://realpython.com/python-f-strings/" title="Real Python: f strings"><code class="language-plaintext highlighter-rouge">f strings</code></a>.
The are far more readable and allow flexability that is simiply not available in the other methods.</p>

<p>They are super simple to use. 
Anytime you have a string, simply have to add a f to the beginning, then you can use there magic. 
To print a variable, you can simplely place them inside curly braces <code class="language-plaintext highlighter-rouge">{}</code>.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">numb</span> <span class="o">=</span> <span class="mi">3</span>
<span class="n">txt</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"My favorite number is </span><span class="si">{</span><span class="n">numb</span><span class="si">}</span><span class="s">"</span>
<span class="k">print</span><span class="p">(</span><span class="n">txt</span><span class="p">)</span>
</code></pre></div></div>

<p>As you can see, this is so much easier to read what is being expressed in the string.
But the fun doesn’t stop here, you also get a ton of useful formatting feature as well.
For example, you can automatically <a href="https://stackoverflow.com/a/45310389" title="SO: f Strings round">round numbers</a> or even print <a href="https://youtube.com/shorts/07Pxa3TbQc4?feature=share" title="Python Engineer: f Strings large numbers">large numbers with commas</a> to separate them for easier readability.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pi = 3.14159
dec_txt = f"Pi is often rounded to {pi:.2f} #  colon indicates formating stuff. period indicates formating decimals
print(dec_txt) # Output: Pi is often rounded to 3.14
million = 1_000_000 # You can also use underscores to help clarify large numbers
mill_txt = f"I can count to {million:,}
print(mill_txt) Output: I can count to 1,000,000
</code></pre></div></div>

<p>full details <a href="https://stackoverflow.com/a/50340297" title="SO: f Strings round Detailed">below</a>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">value</span><span class="si">:{</span><span class="n">width</span><span class="si">}</span><span class="p">.</span><span class="si">{</span><span class="n">precision</span><span class="si">}}</span><span class="s">'</span>
</code></pre></div></div>

<p>where:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">value</code> is any expression that evaluates to a number</li>
  <li><code class="language-plaintext highlighter-rouge">width</code> specifies the number of characters used in total to display, but if value needs more space than the width specifies then the additional space is used.</li>
  <li><code class="language-plaintext highlighter-rouge">precision</code> indicates the number of characters used after the decimal point</li>
</ul>

<p>f-strings can do so much more for formatting and readability, but I will just highlight to more things. 
First you can run any python code inside the <code class="language-plaintext highlighter-rouge">{}</code> so you can do <code class="language-plaintext highlighter-rouge">f"{3+3}</code> to get <code class="language-plaintext highlighter-rouge">"6" or </code>f”{COLOR.lower()}<code class="language-plaintext highlighter-rouge"> to get </code>color`. 
The other neat feature is you can set things to be a certain <a href="https://youtu.be/dvqFNOhNIjM" title="Arjan Codes: f Strings Set size">size</a>:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">greet</span><span class="o">=</span><span class="s">"hi"</span>
<span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">greet</span><span class="si">:</span><span class="n">_</span><span class="o">^</span><span class="mi">10</span><span class="si">}</span><span class="s">"</span> <span class="n">Output</span><span class="p">:</span> <span class="n">____hi____</span>
</code></pre></div></div>

<h2 id="type-hints">Type Hints</h2>

<p>Type hints are a tool that can be used in python to improve readability and expectations of code input and output for functions and classes. With type hints you specify the type each argument requires/expects as well as the expected output type.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="nb">float</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="nb">float</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">float</span><span class="p">:</span>
    <span class="k">return</span><span class="p">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">)</span>
</code></pre></div></div>

<p>In this simiple example, you see that both arguments are expected to be floats and the second argument even has a default value of 3. 
Finally, the expected output is as float. 
Importantly, python does not actually check to confirm the types are as hinted. 
This is only to make it easier to understand how to properly use the script and/or function. 
You can use all the primative types for hints:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">int</code></li>
  <li><code class="language-plaintext highlighter-rouge">str</code></li>
  <li><code class="language-plaintext highlighter-rouge">float</code></li>
  <li><code class="language-plaintext highlighter-rouge">bool</code></li>
  <li><code class="language-plaintext highlighter-rouge">bytes</code></li>
  <li><code class="language-plaintext highlighter-rouge">list[int or str]</code>: As of 3.9+ otherwise need to import: <code class="language-plaintext highlighter-rouge">from typing import List</code></li>
  <li><code class="language-plaintext highlighter-rouge">dict</code>: As of 3.9+ or need import: <code class="language-plaintext highlighter-rouge">from typing import Dict</code></li>
  <li><code class="language-plaintext highlighter-rouge">set</code>: As of 3.9+ or need import: <code class="language-plaintext highlighter-rouge">from typing import Set</code></li>
  <li><code class="language-plaintext highlighter-rouge">tuple</code>: As of 3.9+ or need import: <code class="language-plaintext highlighter-rouge">from typing import Tuple</code></li>
</ul>

<blockquote>
  <p><strong>Note</strong>: For all imports you need to change the type hint to capitalize the first letter when using them in functions.</p>
</blockquote>

<p>For more infromation about type hints such as other use cases, using special type hints, or using custom type hints see this <a href="https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html" title="Type hints cheatsheet">post</a>.</p>

<h2 id="exceptions">Exceptions:</h2>

<p>An <a href="https://youtu.be/nlCKrKGHSSk" title="Socratica: Exceptions">exception</a> is a point in the code where an error occured.
All exceptions have a description of what when wrong as well as a <code class="language-plaintext highlighter-rouge">Traceback</code> of where the exception was encountered. 
There is a list of common exceptions as well as the hierarchy is on the <a href="https://docs.python.org/3/library/exceptions.html#exception-hierarchy" title="Python Exception Hierarchy">python website</a>
Some common exceptions include:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">SyntaxError</code>: As described, you messed up the syntax. You will get this a lot when starting out.</li>
  <li><code class="language-plaintext highlighter-rouge">ValueError</code>: When the value is incorrect like square rooting a negative number.</li>
  <li><code class="language-plaintext highlighter-rouge">FileNotFound</code>: You guessed it, either the file does not exist <strong><em>OR</em></strong> you spelled it wrong.</li>
  <li><code class="language-plaintext highlighter-rouge">TypeError</code>: You used the incorrect type, like adding strings and integers.</li>
  <li><code class="language-plaintext highlighter-rouge">IndexError</code>: Index outside the range of the array.</li>
</ul>

<p>Whenever possible you should use the builtin <a href="https://docs.python.org/3/library/exceptions.html#exception-hierarchy" title="Python Exception Hierarchy">exceptions</a> but you can create you own custom ones when necessary.</p>

<p>To use exceptions in your code you want to mimic the following structure:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span><span class="p">:</span>
    <span class="c1"># code that will be attempted first
</span><span class="k">except</span> <span class="n">e</span> <span class="k">as</span> <span class="nb">ValueError</span><span class="p">:</span>
    <span class="c1"># Code that will run when the specific expection is encountered, you can have multiple of these to handle different exceptions differently. 
</span><span class="k">else</span><span class="p">:</span> 
    <span class="c1"># Additionally code that should be run if it is successful
</span><span class="k">finally</span><span class="p">:</span> 
    <span class="c1"># Addition code that should be run regardless if it encountered an exception or not.
</span>
</code></pre></div></div>

<h2 id="logging">Logging</h2>

<p>When you first start using python and you want to test/debug your code, then you like just add print statements to your code.
Well that is not the proper way to do it. 
A much much better way is to use the built in <a href="https://youtu.be/g8nQ90Hk328" title="Socratica: Logging"><code class="language-plaintext highlighter-rouge">logging</code></a></p>

<h2 id="asynchronous-code">Asynchronous Code</h2>

<p>There are often parts of code that can take a long time to complete, say running a web request. Each web request is independent of one another meaning that the output of one does not affect the other. In these cases you can use the <code class="language-plaintext highlighter-rouge">asyncio</code> package to run multiple web request asynchronously. This can speed up the program quite significantly.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">asyncio</span>
</code></pre></div></div>

<p>For more information, you can check out this <a href="https://youtu.be/2IW-ZEui4h4" title="Arjan Codes: Asynchronous Code with Asyncio">video</a> or this <a href="https://realpython.com/python-async-features/" title="Real Python: asyncio">blog post</a>.</p>

<h2 id="references">References</h2>

<h3 id="virtual-environmnts">Virtual Environmnts</h3>

<h3 id="f-strings-1">f Strings</h3>

<h3 id="type-hints-1">Type hints</h3>

<h3 id="exceptions-1">Exceptions</h3>

<h3 id="logging-1">Logging</h3>

<h3 id="asynchronous-code-1">Asynchronous Code</h3>]]></content><author><name>Deshawn Sambrano</name></author><summary type="html"><![CDATA[Takeaways]]></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/posts/1" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2022-10-03T00:00:00-07:00</published><updated>2022-10-03T00:00:00-07:00</updated><id>http://localhost:4000/posts/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/posts/1"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">hello</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Hello World"</span><span class="p">)</span>

</code></pre></div></div>
<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name>Deshawn Sambrano</name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry></feed>